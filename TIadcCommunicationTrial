/*


*/
#include <SPI.h>

//#define CONVST 8   If JP5 jumper is set on [1-2] then CONVST is tied in with RD  
#define RD 10 
//#define BUSY 9

byte x=0; byte y=0;  //Storage for ADC result high and low byte
word data[4]={0};  //Storage for approx 6us of data
word dataCycle[66]={0};

void conversionTrigger(); //Initialize conversion/rd pulse function 


void setup() 
{
  SerialUSB.begin(115200);
  pinMode(RD, OUTPUT);
  SPI.begin();
  SPI.beginTransaction(SPISettings(20000000, MSBFIRST, SPI_MODE0));
  /*SPI.setClockDivider(5); //Set for 8Mhz SPI (can be faster if using Due)
  SPI.setBitOrder(MSBFIRST);
  SPI.setDataMode(SPI_MODE0);
  // Ignore note for now>>  * Replaced by SPI.beginTransaction(SPISettings(speed, MSBFIRST, SPI_MODE0))
*/
  
  
  //pinMode(CONVST, OUTPUT);
   //pinMode(BUSY, INPUT);
  //digitalWrite(RD, LOW);  //Set and keep RD (SS) low
  
   // conversionTrigger();
    
    // Setup REFDAC1 register
 //  SPI.transfer(0B0001000010100010); // Write to REFDAC1 register with next access (see Figure 38).
   //conversionTrigger();
   //SPI.transfer(0B0001000010100011);  // Read REFDAC1 register content on SDOA with next access
   conversionTrigger();
   /*word referenceVoltage=*/
   
   SPI.transfer(0B0001000010100000);      //Setup Register for ADC CHx0P/CHx0N 
   
//    SerialUSB.print(referenceVoltage);
   // SerialUSB.print("\n"); 
 }

void loop()                 //record # ADC samples
{
//int myTime = micros();    // begin time stamp
    
   
  for (int i=0;i<4;i++)
  {
  conversionTrigger();    
  x=SPI.transfer(0B0000000010100001);      //Get data
   
    noInterrupts();
       #if defined (__SAM3X8E__)           // Arduino Due compatible
         REG_PIOC_SODR |= (0x01 << 22);
         REG_PIOC_CODR |= (0x01 << 22);
       #else
         PORTB |= 0x01;
         PORTB &= ~0x01;
       #endif
    interrupts();
    
  delayMicroseconds(20);         //Wait for conversion to be finished
    
  data[i]=word(x);            //store ADC result as a word
  //data[i]^=0B1000000000000000;
   
 SerialUSB.print("\n");  
 SerialUSB.print(data[i]);
  
}
//int myTime1 = micros(); // end time stamp

//SerialUSB.println(myTime1-myTime);

delay(3333);
        
}

void conversionTrigger()
{   
  // note: digitalWrite is slow. May be better to use port 
  digitalWrite(RD, HIGH); //Pulse RD high to begin conversion
  delay(1);
  digitalWrite(RD, LOW) ; // Begin transfer
  delay(1);
  }
